{"remainingRequest":"C:\\Users\\hefzi\\Documents\\apps\\freelance\\angular-upload-2910\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\hefzi\\Documents\\apps\\freelance\\angular-upload-2910\\node_modules\\ng2-cookies\\unmanagedCookie.js","dependencies":[{"path":"C:\\Users\\hefzi\\Documents\\apps\\freelance\\angular-upload-2910\\node_modules\\ng2-cookies\\unmanagedCookie.js","mtime":1493214032000},{"path":"C:\\Users\\hefzi\\Documents\\apps\\freelance\\angular-upload-2910\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1573486680215},{"path":"C:\\Users\\hefzi\\Documents\\apps\\freelance\\angular-upload-2910\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["\"use strict\";\r\n/**\r\n * Class UnmanagedCookieService - Holds static functions to deal with Cookies\r\n */\r\nvar UnmanagedCookieService = /*@__PURE__*/ (function () {\r\n    function UnmanagedCookieService() {\r\n    }\r\n    /**\r\n     * Checks the existence of a single cookie by it's name\r\n     *\r\n     * @param  {string} name Identification of the cookie\r\n     * @returns existence of the cookie\r\n     */\r\n    UnmanagedCookieService.prototype.check = function (name) {\r\n        if (typeof document === \"undefined\")\r\n            return false; // Check if document exist avoiding issues on server side prerendering\r\n        var regexp = new RegExp('(?:^' + name + '|;\\\\s*' + name + ')=(.*?)(?:;|$)', 'g');\r\n        var exists = regexp.test(document.cookie);\r\n        return exists;\r\n    };\r\n    /**\r\n     * Retrieves a single cookie by it's name\r\n     *\r\n     * @param  {string} name Identification of the Cookie\r\n     * @returns The Cookie's value\r\n     */\r\n    UnmanagedCookieService.prototype.get = function (name) {\r\n        if (this.check(name)) {\r\n            var regexp = new RegExp('(?:^' + name + '|;\\\\s*' + name + ')=(.*?)(?:;|$)', 'g');\r\n            var result = regexp.exec(document.cookie);\r\n            return result[1];\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    };\r\n    /**\r\n     * Retrieves a a list of all cookie avaiable\r\n     *\r\n     * @returns Object with all Cookies\r\n     */\r\n    UnmanagedCookieService.prototype.getAll = function () {\r\n        var cookies = {};\r\n        // tslint:disable-next-line:triple-equals\r\n        if (document.cookie && document.cookie != '') {\r\n            var split = document.cookie.split(';');\r\n            for (var _i = 0, split_1 = split; _i < split_1.length; _i++) {\r\n                var s = split_1[_i];\r\n                var currCookie = s.split('=');\r\n                currCookie[0] = currCookie[0].replace(/^ /, '');\r\n                cookies[currCookie[0]] = currCookie[1];\r\n            }\r\n        }\r\n        return cookies;\r\n    };\r\n    /**\r\n     * Save the Cookie\r\n     *\r\n     * @param  {string} name Cookie's identification\r\n     * @param  {string} value Cookie's value\r\n     * @param  {number} expires Cookie's expiration date in days from now or at a specific date from a Date object. If it's undefined the cookie is a session Cookie\r\n     * @param  {string} path Path relative to the domain where the cookie should be avaiable. Default /\r\n     * @param  {string} domain Domain where the cookie should be avaiable. Default current domain\r\n     * @param  {boolean} secure If true, the cookie will only be available through a secured connection\r\n     */\r\n    UnmanagedCookieService.prototype.set = function (name, value, expires, path, domain, secure) {\r\n        var cookieStr = name + '=' + value + ';';\r\n        if (expires) {\r\n            if (typeof expires === 'number') {\r\n                var dtExpires = new Date(new Date().getTime() + expires * 1000 * 60 * 60 * 24);\r\n                cookieStr += 'expires=' + dtExpires.toUTCString() + ';';\r\n            }\r\n            else {\r\n                cookieStr += 'expires=' + expires.toUTCString() + ';';\r\n            }\r\n        }\r\n        if (path) {\r\n            cookieStr += 'path=' + path + ';';\r\n        }\r\n        if (domain) {\r\n            cookieStr += 'domain=' + domain + ';';\r\n        }\r\n        if (secure) {\r\n            cookieStr += 'secure;';\r\n        }\r\n        // console.log(cookieStr);\r\n        document.cookie = cookieStr;\r\n    };\r\n    /**\r\n     * Removes specified Cookie\r\n     *\r\n     * @param  {string} name Cookie's identification\r\n     * @param  {string} path Path relative to the domain where the cookie should be avaiable. Default /\r\n     * @param  {string} domain Domain where the cookie should be avaiable. Default current domain\r\n     */\r\n    UnmanagedCookieService.prototype.delete = function (name, path, domain) {\r\n        this.set(name, '', -1, path, domain);\r\n    };\r\n    /**\r\n     * Delete all cookie avaiable\r\n     */\r\n    UnmanagedCookieService.prototype.deleteAll = function (path, domain) {\r\n        var cookies = this.getAll();\r\n        for (var _i = 0, _a = Object.keys(cookies); _i < _a.length; _i++) {\r\n            var cookieName = _a[_i];\r\n            this.delete(cookieName, path, domain);\r\n        }\r\n    };\r\n    return UnmanagedCookieService;\r\n}());\r\nexports.UnmanagedCookieService = UnmanagedCookieService;\r\nexports.UnmanagedCookie = new UnmanagedCookieService();\r\n",null]}